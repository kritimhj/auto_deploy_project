version: 2.1
orbs:
  slack: circleci/slack@4.6.1
  aws-cli: circleci/aws-cli@1.4.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run lint -- --fix
      - save_cache:
          paths: [frontend/node_modules]
          key: << pipeline.id >>-frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run lint -- --fix
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: << pipeline.id >>-backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit --audit-level=critical
#            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          command: |
            cd backend
            npm i
            npm audit fix
            npm audit --audit-level=critical
#            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1

      # Checkout code from git
      # Restore from cache
      # Your job code here

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run: yum install -y tar #(install dependencies)
      - run: yum install -y gzip #(install dependencies)
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udacity
#            URLS=$(aws ec2 describe-instances --region us-east-2 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text)
#            echo "URLS=$URLS"
#            curl -H "Content-Type: text/plain" -H "token: 1e1e96f7-a791-42b5-b240-bd5407aa9c51" --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udacity
 #             exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            # exit 1
      - save_cache:
          paths:
            - ~/project/.circleci/ansible/inventory.txt
          key: << pipeline.id >>-deploy-infra
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    # Environment suggestion here: https://knowledge.udacity.com/questions/484346
#    environment:
#      TYPEORM_CONNECTION: $TYPEORM_CONNECTION
#      TYPEORM_HOST: $TYPEORM_HOST
#      TYPEORM_USERNAME: $TYPEORM_USERNAME
#      TYPEORM_PASSWORD: $TYPEORM_PASSWORD
#      TYPEORM_DATABASE: $TYPEORM_DATABASE
#      TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
#      TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "c3:56:8d:ca:23:f3:14:0b:91:45:3e:a8:55:ac:d6:c7"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            pip3 install --upgrade pip \
              && pip3 install awscli
            #exit 1
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            # Your code here
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
            # exit 1
      # Here's where you will add some code to rollback on failure

  run-migrations: #preparing data needed for backend application to run
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
          #paths:
            #- project/
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
            pwd
            ls -la
      - run:
          name: add values to .env files # Create a `backend/.env` file and add those values there dynamically
          command: |
            echo PWD
            pwd
            #ls -la
            touch backend/.env
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            pwd
            echo " THIS IS .env CONTENTS:"
            cat .env
            echo 'DUMP MIGRATIONS'
            echo 'hello world!!' > migrations_dump.txt
            npm run migrations >> migrations_dump.txt
            echo "generated file!"
            pwd
            ls -la
            echo 'DISPLAY CONTENTS'
            echo '*****************'
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" migrations.txt; then
              curl -H "Content-Type: text/plain" -H "token: 41becf56-e770-4630-a0e7-4f17f1d66667" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H "token: 41becf56-e770-4630-a0e7-4f17f1d66667" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            SUCCESS=$(curl -H "token: 41becf56-e770-4630-a0e7-4f17f1d66667" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo "${SUCCESS}"
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
#      - revert-migrations
#      - destroy-environment
#
#  deploy-frontend:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#      - run:
#          name: Deploy frontend objects
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]