version: 2.1
orbs:
  slack: circleci/slack@4.6.1
  aws-cli: circleci/aws-cli@1.4.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run lint -- --fix
      - save_cache:
          paths: [frontend/node_modules]
          key: << pipeline.id >>-frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run lint -- --fix
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: << pipeline.id >>-backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit --audit-level=critical
#            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          command: |
            cd backend
            npm i
            npm audit fix
            npm audit --audit-level=critical
#            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1

      # Checkout code from git
      # Restore from cache
      # Your job code here

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run: yum install -y tar #(install dependencies)
      - run: yum install -y gzip #(install dependencies)
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udacity
#            URLS=$(aws ec2 describe-instances --region us-east-1 --query "Reservations[*]
#            .Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text)
#            echo "URLS=$URLS"
#            curl -H "Content-Type: text/plain" -H "token: 1e1e96f7-a791-42b5-b240-bd5407aa9c51" --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udacity
 #             exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            # exit 1
      - save_cache:
          paths:
            - ~/project/.circleci/ansible/inventory.txt
          key: << pipeline.id >>-deploy-infra
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "c3:56:8d:ca:23:f3:14:0b:91:45:3e:a8:55:ac:d6:c7"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            pip3 install --upgrade pip \
              && pip3 install awscli
            #exit 1
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            # Your code here
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/install
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            echo "Running migrations..."
            npm run migrations > /tmp/migrations.results
            cat /tmp/migrations.results
#            if (grep "has been executed successfully" /tmp/migrations.results)
#            then
#            curl -H "Content-Type: text/plain" \
#              -H "token: ${CIRCLE_WORKFLOW_ID}" \
#              --request PUT \
#              --data "1" \
#              https://api.memstash.io/values/migration
##      - revert-migrations
##      - destroy-environment
#
#  deploy-frontend:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#      - run:
#          name: Deploy frontend objects
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c3:56:8d:ca:23:f3:14:0b:91:45:3e:a8:55:ac:d6:c7"
      - attach_workspace:
          at: ~/
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
            pip3 install --upgrade pip \
              && pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            # your code here
            pwd
            ls -al
            cd ~
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image
#      - image: python:3.7-alpine3.11
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#            apk add curl
#            pip3 install --upgrade pip \
#              && pip3 install awscli
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/deployment)
#            echo "I think the Backend IP is ${BACKEND_IP}"
#            echo ${BACKEND_IP} > /tmp/backend
#            echo -n "The file /tmp/backend contains IP:"
#            cat /tmp/backend
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#            BACKEND_URL="http://$(cat /tmp/backend):3030/api/status"
#            echo "curl-ing ${BACKEND_URL}"
#            if curl ${BACKEND_URL}
#              then exit 0
#              else exit 1
#            fi
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
#            echo "curl-ing ${URL}"
#            if curl ${URL} | grep -q "Welcome"
#              then exit 0
#              else exit 1
#            fi
#      # Here's where you will add some code to rollback on failure
#      - destroy-environment
#      - empty-bucket
#      - revert-migrations
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#      - image: amazon/aws-cli
#    steps:
#      # Checkout code from git
#      - checkout
#      # - run:
#      #     name: Install dependencies
#      #     command: |
#      #       # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#            # aws cloudformation deploy \
#            #   --template-file .circleci/files/cloudfront.yml \
#            #   --tags project=project4-cloudfront \
#            #   --stack-name udapeople-cloudfront \
#            #   --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID} &
#            aws cloudformation update-stack \
#            --use-previous-template \
#            --stack-name udapeople-cloudfront \
#            --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID},UsePreviousValue=false
#      # Here's where you will add some code to rollback on failure
#      - destroy-environment
#      - empty-bucket
#      - revert-migrations

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Find and remove old stacks
          command: |
            # your code here
            FoundWorkflowIDs=($(aws cloudformation describe-stacks \
                          --query 'Stacks[?Tags[?Key == `project` && Value == `project4-frontend` || Value == `project4-backend`]].{Parameters: Parameters[?ParameterKey == `WorkflowID`]}' \
                          --no-paginate \
                          --output text | awk '{print $3}' |sort |uniq))
            OldWorkflowID=()
            for WorkflowID in ${FoundWorkflowIDs[@]}
              do
                if [ "${WorkflowID}" = "${CIRCLE_WORKFLOW_ID}" ]
                  then continue
                  else OldWorkflowID=(${WorkflowID} ${OldWorkflowID[@]})
                fi
              done
            echo "Found Stacks with old WorkflowIDs:"
            for i in ${OldWorkflowID[@]}
              do echo ${i}
              done
            if [ ${#OldWorkflowID} -gt 0 ]
              then
                echo "Found ${#OldWorkflowID[@]} stack(s) which needs to be removed"
                for ID in ${OldWorkflowID[@]}
                  do
                    echo "Removing S3 bucket with WorkflowID: ${ID}"
                    aws s3 rm --recursive "s3://udapeople-${ID}/" &
                    echo "Removing Backend stack with WorkflowID: ${ID}"
                    aws cloudformation delete-stack --stack-name prodbackend-${ID} &
                    echo "Removing Frontend stack with WorkflowID: ${ID}"
                    aws cloudformation delete-stack --stack-name prodfrontend-${ID} &
                    sleep 10
                  done
              else
                echo "Did not find any stacks to remove."
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
##      - deploy-frontend #:
##          requires: [run-migrations]
#      - deploy-backend
##      - deploy-backend:
##          requires: [run-migrations]
#      - cleanup
##      - smoke-test:
##          requires: [deploy-backend]
##      - smoke-test:
##          requires: [deploy-backend, deploy-frontend]
##      - cloudfront-update:
##          requires: [smoke-test]
##       - cleanup:
##           requires: [smoke-test]
##      - cleanup:
##          requires: [cloudfront-update]